// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package schema

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO item (p_name, price) VALUES ($1,$2)
`

type CreateItemParams struct {
	PName sql.NullString `json:"p_name"`
	Price sql.NullString `json:"price"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem, arg.PName, arg.Price)
	return err
}

const findAll = `-- name: FindAll :many
SELECT p_name FROM item
`

func (q *Queries) FindAll(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, findAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []sql.NullString{}
	for rows.Next() {
		var p_name sql.NullString
		if err := rows.Scan(&p_name); err != nil {
			return nil, err
		}
		items = append(items, p_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
